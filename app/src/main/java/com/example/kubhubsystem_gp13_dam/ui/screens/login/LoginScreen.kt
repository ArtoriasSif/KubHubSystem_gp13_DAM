package com.example.kubhubsystem_gp13_dam.ui.screens.login

import androidx.compose.animation.*
import androidx.compose.foundation.BorderStroke
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.interaction.MutableInteractionSource
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Email
import androidx.compose.material.icons.filled.Lock
import androidx.compose.material.icons.filled.Visibility
import androidx.compose.material.icons.filled.VisibilityOff
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.draw.shadow
import androidx.compose.ui.graphics.vector.ImageVector
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.input.PasswordVisualTransformation
import androidx.compose.ui.text.input.VisualTransformation
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.lifecycle.viewmodel.compose.viewModel
import com.example.kubhubsystem_gp13_dam.model.UserRole
import com.example.kubhubsystem_gp13_dam.repository.UsuarioRepository
import com.example.kubhubsystem_gp13_dam.ui.theme.loginTextFieldColors
import com.example.kubhubsystem_gp13_dam.viewmodel.LoginViewModel
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch

/**
 * Esta funci√≥n dibuja la pantalla de inicio de sesi√≥n.
 *
 * - Usa el ViewModel para conocer y manejar el estado de la UI:
 *      email, contrase√±a, errores, indicadores de carga, etc.
 * - Recibe una funci√≥n `onLoginSuccess` que se ejecuta cuando el login
 *      se realiza correctamente, por ejemplo, para navegar a otra pantalla.
 * - Si no se pasa un ViewModel ni la funci√≥n de √©xito, Compose crea el ViewModel
 *      autom√°ticamente y no hace nada al iniciar sesi√≥n.
 *
 * En resumen: esta funci√≥n se encarga de mostrar la UI del login y de reaccionar
 * a los cambios de estado de forma segura y autom√°tica.
 */
@Composable
fun LoginScreen(
    usuarioRepository: UsuarioRepository, // ‚úÖ Recibir el repositorio como par√°metro
    onLoginSuccess: () -> Unit = {}
) {
    // ‚úÖ Crear el ViewModel manualmente con las dependencias necesarias
    val viewModel: LoginViewModel = remember {
        LoginViewModel(usuarioRepository)
    }
    /**üìå Obtenemos el estado completo de la UI desde el ViewModel
     *    uiState: trae toda la informaci√≥n actual de la pantalla desde el ViewModel (email, password, rol, errores, carga)
     *    que es observado mediante StateFlow, lo que garantiza recomposici√≥n autom√°tica ante cambios. En otras palabras GG
     */
    val uiState by viewModel.uiState.collectAsState()

    //üìå Estados locales de la UI
    var showDemoAccounts by remember { mutableStateOf(false) }          // Controla si el panel de "cuentas demo" se muestra
    var isLoadingDemoAccounts by remember { mutableStateOf(false) }     // Muestra animaci√≥n de carga antes de desplegar cuentas demo
    var showForgotPasswordDialog by remember { mutableStateOf(false) }  // Controla la visibilidad del di√°logo "¬øOlvid√≥ su contrase√±a?"
    var forgotPasswordPressed by remember { mutableStateOf(false) }     // Evita mantener presionado el bot√≥n de "olvid√© contrase√±a"

    /**üìåEstados derivados para optimizar recomposiciones, prevenir recomposiciones innecesarias con derivedStateOf
     *   Estos estados usan `derivedStateOf` para evitar que toda la UI se recomponga
     *   cuando solo cambian valores espec√≠ficos del ViewModel. Mejoran el rendimiento.
     */
    val hasError by remember { derivedStateOf { uiState.errorMessage != null } } // True si hay error de login
    val isLoading by remember { derivedStateOf { uiState.isLoading } }           // True si el login est√° en proceso
    val selectedRole by remember { derivedStateOf { uiState.selectedRole } }     // Rol actualmente seleccionado en modo demo (puede ser null)

    /**üìåValor memoizado para controlar la visibilidad del grid de roles demo, memorizar valores costosos (arreglo de control de error por sobrecarga)
     *   `shouldShowDemoGrid` controla la visibilidad del grid de roles demo.
     *   Se deriva de `showDemoAccounts` y `isLoadingDemoAccounts` para evitar recomposici√≥n innecesaria.
     */

    val shouldShowDemoGrid by remember { derivedStateOf { showDemoAccounts && !isLoadingDemoAccounts } }

    /**  üíÄ Diagn√≥stico de rendimiento (solo DEBUG)
     *   Este bloque mide cu√°nto tarda en componerse este Composable.
     *   Es √∫til para detectar "frame drops" o lentitud en la renderizaci√≥n,
     *   cuando hay demasiadas operaciones pesadas dentro de la composici√≥n. (Como es el caso XD)
     */
    if (false) { // Cambiar a true solo para debugging, cuando se quiera medir rendimiento
        DisposableEffect(Unit) {
            val startTime = System.currentTimeMillis()
            println("üîµ LoginScreen: Composici√≥n iniciada")

            onDispose {
                val duration = System.currentTimeMillis() - startTime
                println("üî¥ LoginScreen: Composici√≥n terminada - Duraci√≥n: ${duration}ms")
                if (duration > 16) {
                    println("‚ö†Ô∏è FRAME DROP: La composici√≥n tom√≥ ${duration}ms (>${duration/16} frames)")
                }
            }
        }
    }

    Box(
        modifier = Modifier
            .fillMaxSize()  // Ocupa tod el espacio disponible de la pantalla
            .background(MaterialTheme.colorScheme.surface) // Establece el color de fondo principal seg√∫n el tema actual (CAMBIO FUTURO A LOS COLORS)
            .padding(bottom = 48.dp) // Deja espacio extra en la parte inferior para no superponer el footer
    ) {
        /**  üü• CONTENEDOR PRINCIPAL DEL FORMULARIO DE LOGIN
         *   Contiene todos los elementos del formulario de login
         */
        Box(
            modifier = Modifier
                .fillMaxWidth(0.80f) // El contenedor ocupa el 80% del ancho total
                .wrapContentHeight()// Su altura se adapta al contenido (sin forzar espacio extra)
                .align(Alignment.Center)// Centra el formulario vertical y horizontalmente dentro del Box padre
                .shadow(
                    elevation = 10.dp,                           // Aplica sombra para destacar el contenedor
                    shape = RoundedCornerShape(16.dp),    // Bordes redondeados suaves
                    clip = false                                 // No recorta el contenido al borde del contenedor
                )
                .background(
                    color = MaterialTheme.colorScheme.secondaryContainer, // Color de fondo del formulario seg√∫n el tema
                    shape = RoundedCornerShape(16.dp)               // Misma curvatura que la sombra para mantener coherencia visual
                )
                .padding(horizontal = 30.dp, vertical = 10.dp)             // Margen interno (espaciado entre bordes y contenido) para tod los elementos
        ) {
            /**  üî≥ ESTRUCTURA INTERNA: COLUMNA DEL FORMULARIO DE LOGIN
             *   Dentro del contenedor principal, se usa una columna para apilar los elementos verticalmente.
             */
            Column(
                verticalArrangement = Arrangement.spacedBy(8.dp), // Espaciado uniforme entre cada elemento hijo
                horizontalAlignment = Alignment.CenterHorizontally        // Centra todos los elementos horizontalmente
            ) {
                // T√≠tulo Encabezado con tipograf√≠a grande y en negrita, transmitiendo jerarqu√≠a visual
                Text(
                    text = "Iniciar sesi√≥n",
                    color = MaterialTheme.colorScheme.primaryContainer,
                    fontWeight = FontWeight.Bold,
                    fontSize = MaterialTheme.typography.headlineLarge.fontSize
                )

                // Subt√≠tulo orienta al usuario, explicando la acci√≥n a realizar.
                Text(
                    text = "Ingrese sus credenciales para acceder",
                    // Se usa un color secundario con opacidad reducida (0.8f) para no competir visualmente con el t√≠tulo.
                    color = MaterialTheme.colorScheme.onSurfaceVariant.copy(alpha = 0.8f),
                    fontWeight = FontWeight.Normal,
                    fontSize = MaterialTheme.typography.bodyMedium.fontSize
                )

                /**
                 * ‚úèÔ∏è CAMPOS DE ENTRADA DEL FORMULARIO
                 * Ambos campos son componentes personalizados (modulares) que encapsulan
                 * la l√≥gica y el estilo de los TextField. Esto mejora la reutilizaci√≥n y
                 * la mantenibilidad del c√≥digo.
                 * Se enlazan con el ViewModel a trav√©s del estado uiState, garantizando
                 * que los cambios de texto se reflejen de forma reactiva, pricipalmente en errores.
                 *
                 * CAMPO DE CORREO ELECTR√ìNICO
                 * Usa un √≠cono de correo y muestra el estado de error si las  credenciales son inv√°lidas o el formato no es correcto.
                 *
                 * CAMPO DE CONTRASE√ëA
                 * Usa un √≠cono de candado y muestra el estado de error si las credenciales son inv√°lidas.
                 * El componente PasswordTextField incluye funcionalidad para mostrar u ocultar el texto, reforzando la usabilidad.
                 */


                // Campo de correo (componente modular)
                LoginTextField(
                    value = uiState.email,  // Valor actual del campo, gestionado por el ViewModel
                    onValueChange = { viewModel.updateEmail(it) }, // Callback que actualiza el estado reactivo en el ViewModel
                    label = "Correo Electr√≥nico*",  // Etiqueta visible sobre el campo
                    placeholder = "correo@ejemplo.com", // Texto gu√≠a cuando el campo est√° vac√≠o
                    isError = hasError, // Control visual de error (bordes/colores rojos)
                    leadingIcon = Icons.Default.Email // √çcono al inicio, representando el tipo de dato (correo)
                )

                // Campo de contrase√±a (componente modular)
                PasswordTextField(
                    value = uiState.password,
                    onValueChange = { viewModel.updatePassword(it) },// Actualiza el estado de la contrase√±a
                    label = "Contrase√±a*",
                    placeholder = "********",
                    isError = hasError
                )

                /**
                 * ‚ö†Ô∏è MENSAJE DE ERROR ANIMADO
                 * Este bloque se encarga de mostrar mensajes de error de forma din√°mica
                 * credenciales incorrectas o campos vac√≠os
                 *
                 * Componente que controla la visibilidad del mensaje de error
                 * - `visible = hasError`: el mensaje solo aparece si existe un error.(en este caso de no existir en el repo)
                 * - `enter`: define la animaci√≥n al mostrarse (desvanecido + expansi√≥n vertical).(al no encuentrar o campo en blanco)
                 * - `exit`: define la animaci√≥n al ocultarse (desvanecido inverso + contracci√≥n).(al ingresar algo en ambos campos)
                 */

                // Mensaje de error
                AnimatedVisibility(
                    visible = hasError,
                    enter = fadeIn() + expandVertically(),
                    exit = fadeOut() + shrinkVertically()
                ) {
                    Text(
                        text = uiState.errorMessage ?: "",
                        color = MaterialTheme.colorScheme.error,
                        fontSize = MaterialTheme.typography.bodySmall.fontSize,
                        modifier = Modifier.fillMaxWidth()
                    )
                }

                /**
                 * ‚ôã FILA: RECORDAR SESI√ìN Y ¬øOLVID√ì SU CONTRASE√ëA?
                 * que esta definida como una funcion en un box que contiene dos elementos (checkbox y boton) un componente modular reutilizable
                 * 1Ô∏è‚É£ La opci√≥n para mantener la sesi√≥n activa (checkbox). (No implementado dado actualmente dado que tiene que esta conectado a cerrar session)
                 * 2Ô∏è‚É£ El enlace para recuperar la contrase√±a olvidada.
                 *
                 * Componente que contiene las opciones secundarias del formulario.
                 * ----------------------------------------------------------
                 * - `rememberSession`: indica si el usuario desea mantener la sesi√≥n iniciada.
                 * - `forgotPasswordPressed`: controla la animaci√≥n o estado visual del texto ‚Äú¬øOlvid√≥ su contrase√±a?‚Äù.
                 * - `onRememberSessionChange`: callback que actualiza el estado en el ViewModel.
                 * - `onForgotPasswordClick`: callback que dispara la l√≥gica de recuperaci√≥n (abre di√°logo y actualiza estado).
                 */

                // Fila: Recordar sesi√≥n y ¬øOlvid√≥ su contrase√±a?
                RememberAndForgotRow(
                    rememberSession = uiState.rememberSession,                                      // Estado actual del switch "Recordar sesi√≥n"
                    forgotPasswordPressed = forgotPasswordPressed,                                  // Indica si se presion√≥ el texto de "¬øOlvid√≥ su contrase√±a?"
                    onRememberSessionChange = { viewModel.updateRememberSession(it) },   // Actualiza el valor en el ViewModel
                    onForgotPasswordClick = {
                        forgotPasswordPressed = true                           // Activa el estado visual de ‚Äúpresionado‚Äù
                        showForgotPasswordDialog = true                        // Muestra el di√°logo de recuperaci√≥n
                        viewModel.updateForgotPasswordRequest(true) // Notifica al ViewModel que se inici√≥ la solicitud
                    }
                )

                /**
                 * üîò BOT√ìN PRINCIPAL: INICIAR SESI√ìN
                 * Ejecuta el proceso de autenticaci√≥n al hacer clic, mostrando junto con una animacion
                 * indicador de carga mientras se valida la informaci√≥n.
                 *
                 * Componente del bot√≥n de inicio de sesi√≥n.
                 * ----------------------------------------------------------
                 * - `isLoading`: indica si el proceso de autenticaci√≥n est√° en curso.
                 *    Cuando es `true`, el bot√≥n suele mostrar un spinner o desactivar la interacci√≥n.
                 * - `onClick`: callback que dispara la funci√≥n de login en el ViewModel.
                 *    Si el login es exitoso, se ejecuta `onLoginSuccess` (navegaci√≥n o cambio de pantalla).
                 */
                // Bot√≥n de iniciar sesi√≥n
                LoginButton(
                    isLoading = isLoading,                                     // Estado de carga: muestra feedback visual al usuario
                    onClick = { viewModel.login(onLoginSuccess) }  // Llama al m√©todoo login del ViewModel y gestiona la respuesta
                )

                //Los metodos de Demos estan implementado de esta manera entediendo que no existira en la version final

                /**
                 * ‚ö° ACCESO R√ÅPIDO: CUENTAS DEMO CON CORUTINAS
                 *
                 * (DemoAccountsButton). Permite mostrar u ocultar una lista de roles demo,
                 *  incluyendo animaciones de carga optimizadas con corutinas.
                 *
                 * Scope de corutinas vinculado al ciclo de vida del Composable.
                 * ----------------------------------------------------------
                 * - `rememberCoroutineScope()` crea un √°mbito que se cancela autom√°ticamente
                 *    cuando el Composable se elimina de la composici√≥n.
                 * - Es ideal para manejar delays, animaciones o llamadas asincr√≥nicas
                 *    sin riesgo de fugas de memoria.
                 */
                val coroutineScope = rememberCoroutineScope()

                /**
                 * BOT√ìN DE ACCESO R√ÅPIDO A CUENTAS DEMO
                 * ----------------------------------------------------------
                 * Controla la expansi√≥n/colapso de la lista de cuentas demo.
                 * - `isExpanded`: define si la lista est√° visible.
                 * - `isLoading`: muestra animaci√≥n de carga mientras se simula la preparaci√≥n de datos.
                 * - `hasSelectedRole`: indica si el usuario ya seleccion√≥ un rol demo.
                 * - `onClick`: gestiona la l√≥gica de alternancia entre mostrar, ocultar o limpiar selecci√≥n.
                 */

                DemoAccountsButton(
                    isExpanded = showDemoAccounts,          // Estado visual actual del men√∫ demo
                    isLoading = isLoadingDemoAccounts,      // Controla la animaci√≥n de carga
                    hasSelectedRole = selectedRole != null, // Comprueba si hay rol seleccionado (memoizado)
                    onClick = {
                        when {
                            // Caso 1: Lista visible y rol seleccionado ‚Üí cerrar y limpiar
                            showDemoAccounts && uiState.selectedRole != null -> {
                                // Cerrar y limpiar selecci√≥n
                                showDemoAccounts = false
                                viewModel.clearDemoSelection()// Limpia el estado en el ViewModel
                            }

                            // Caso 2: Lista visible sin selecci√≥n ‚Üí solo ocultar
                            showDemoAccounts && uiState.selectedRole == null -> {
                                // Solo ocultar sin limpiar
                                showDemoAccounts = false
                            }

                            // Caso 3: Lista oculta ‚Üí mostrar con animaci√≥n de carga
                            !showDemoAccounts -> {
                                // Mostrar animaci√≥n de carga (reducido de 2000ms a 1000ms)
                                isLoadingDemoAccounts = true // Activa el estado de carga
                                coroutineScope.launch {
                                    delay(1000)
                                    isLoadingDemoAccounts = false
                                    showDemoAccounts = true // Muestra la lista demo al finalizar el delay
                                }
                            }
                        }
                    }
                )

                /**
                 * L√≠nea separadora (solo visible cuando se muestran las cuentas demo)
                 * Animaci√≥n simplificada para mejor rendimiento
                 *
                 * Componente animado que controla la visibilidad del separador y texto.
                 * ----------------------------------------------------------
                 * - `visible = shouldShowDemoGrid`: solo se muestra cuando las cuentas demo est√°n activas.
                 * - `enter` y `exit`: definen animaciones suaves de aparici√≥n/desaparici√≥n.
                 *   Se usa una versi√≥n simplificada para optimizar el rendimiento.
                 */
                AnimatedVisibility(
                    visible = shouldShowDemoGrid, // Estado memoizado que controla la visibilidad
                    enter = fadeIn() + expandVertically(),// Animaci√≥n de entrada: opacidad + expansi√≥n vertical
                    exit = fadeOut() + shrinkVertically()// Animaci√≥n de salida: opacidad inversa + contracci√≥n
                ) {
                    Column {
                        /**
                         * L√çNEA SEPARADORA VISUAL
                         * ----------------------------------------------------------
                         * Divide visualmente el formulario principal de la secci√≥n demo.
                         * Usa el color del tema con opacidad reducida para mantener
                         * coherencia crom√°tica sin generar alto contraste.
                         */
                        HorizontalDivider(
                            color = MaterialTheme.colorScheme.onSurfaceVariant.copy(alpha = 0.5f),
                            thickness = 1.dp,
                            modifier = Modifier
                                .fillMaxWidth() // Ocupa todo el ancho
                                .padding(vertical = 8.dp) // Espaciado vertical moderado
                        )

                        /**
                         * TEXTO INFORMATIVO
                         * ----------------------------------------------------------
                         * Indica al usuario c√≥mo interactuar con la secci√≥n de cuentas demo.
                         * Centrado horizontalmente para mantener equilibrio visual.
                         */
                        Text(
                            text = "Haz clic en cualquier rol para autocompletar las credenciales",
                            color = MaterialTheme.colorScheme.onSurfaceVariant.copy(alpha = 0.5f),
                            fontSize = MaterialTheme.typography.bodySmall.fontSize,
                            modifier = Modifier
                                .fillMaxWidth()
                                .padding(bottom = 8.dp),// Separaci√≥n inferior
                            textAlign = TextAlign.Center// Centrado visual
                        )
                    }
                }

                /**
                 * GRID DE ROLES DEMO CON ANIMACI√ìN OPTIMIZADA
                 * Este bloque muestra los botones de roles disponibles para cuentas demo.
                 * Se activa √∫nicamente cuando `showDemoAccounts` es true y `isLoadingDemoAccounts` es false.
                 * La animaci√≥n de entrada/salida es simplificada para mejorar el rendimiento.
                 *
                 * Componente animado que controla la visibilidad del grid de roles.
                 * ----------------------------------------------------------
                 * - `visible`: muestra el grid solo si las cuentas demo est√°n activas y no hay carga en curso.
                 * - `enter` y `exit`: animaciones suaves de aparici√≥n y desaparici√≥n
                 *   (fade + expansi√≥n/contracci√≥n vertical), eliminando scaleIn/scaleOut
                 *   para optimizar el renderizado.
                 */
                AnimatedVisibility(
                    visible = showDemoAccounts && !isLoadingDemoAccounts,// Condici√≥n para mostrar el grid
                    enter = fadeIn() + expandVertically(),               // Animaci√≥n de entrada
                    exit = fadeOut() + shrinkVertically()                // Animaci√≥n de salida
                ) {
                    /**
                     * Grid de roles demo
                     * ----------------------------------------------------------
                     * - `selectedRole`: indica cu√°l rol est√° actualmente seleccionado.
                     * - `onRoleSelected`: callback que notifica al ViewModel qu√© rol fue seleccionado.
                     *   Permite autocompletar credenciales de la cuenta demo.
                     */
                    RolesGrid(
                        selectedRole = uiState.selectedRole, // Rol seleccionado actualmente (memoizado)
                        onRoleSelected = { role -> viewModel.selectDemoRole(role) }// Actualiza la selecci√≥n en el ViewModel
                    )
                }
            }
        }

        /**
         * FOOTER DE LA PANTALLA
         * ----------------------------------------------------------
         * Muestra informaci√≥n est√°tica de la aplicaci√≥n al final de la pantalla.
         * - Centrado horizontalmente.
         * - Color tenue y tama√±o peque√±o para no competir con el contenido principal.
         */
        // Footer
        Column(
            modifier = Modifier
                .align(Alignment.BottomCenter)
                .padding(bottom = 32.dp),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Text(
                text = "¬© 2025 KuHub System | Version 0.1",
                color = MaterialTheme.colorScheme.onSurfaceVariant.copy(alpha = 0.5f),
                fontSize = MaterialTheme.typography.bodySmall.fontSize
            )
        }

        /**
         * LOGGING DE ESTADOS INCONSISTENTES
         * ----------------------------------------------------------
         * - Usa `SideEffect` en lugar de `LaunchedEffect` para evitar loops de recomposici√≥n.
         * - Permite detectar posibles inconsistencias en los estados de la UI.
         * üîç Logging solo cuando hay estados inconsistentes (posibles errores)
         * ‚úÖ Usamos SideEffect en lugar de LaunchedEffect para evitar loops
         */

        SideEffect {
            // Caso an√≥malo: ambos estados activos simult√°neamente
            if (showDemoAccounts && isLoadingDemoAccounts) {
                println("‚ö†Ô∏è ERROR: Ambos estados activos simult√°neamente - showDemoAccounts=true | isLoadingDemoAccounts=true")
            }
            // Caso an√≥malo: rol seleccionado pero cuentas demo ocultas
            if (!showDemoAccounts && uiState.selectedRole != null) {
                println("‚ö†Ô∏è ADVERTENCIA: Rol seleccionado pero cuentas demo ocultas - selectedRole=${uiState.selectedRole}")
            }
        }
    }

    /**
     * üîë DI√ÅLOGO DE CONTRASE√ëA OLVIDADA
     * Muestra un di√°logo para recuperaci√≥n de contrase√±a.
     * ----------------------------------------------------------
     * - `showForgotPasswordDialog` controla si el di√°logo est√° visible.
     * - `email`: correo electr√≥nico ingresado por el usuario.
     * - `onDismiss`: callback que cierra el di√°logo y restaura los estados
     *    del bot√≥n "¬øOlvid√≥ su contrase√±a?" y la solicitud en el ViewModel.
     */
    if (showForgotPasswordDialog) {
        ForgotPasswordDialog(
            email = uiState.email,
            onDismiss = {
                showForgotPasswordDialog = false                        // Oculta el di√°logo
                forgotPasswordPressed = false                           // Restaura estilo normal del bot√≥n
                viewModel.updateForgotPasswordRequest(false) // Actualiza estado en ViewModel
            }
        )
    }
}

// ==========================================================================================================================================
// COMPONENTES MODULARES REUTILIZABLES
// ==========================================================================================================================================
// =====================================================================
// üü¶ TEXT FIELDS (ENTRADAS DE TEXTO)
// =====================================================================

/**
 * COMPONENTE: LOGIN TEXT FIELD
 *
 * Campo de texto est√°ndar para login.
 * ----------------------------------------------------------
 * Este composable encapsula un `OutlinedTextField` con estilo
 * y comportamiento predefinidos para mantener coherencia visual
 * en los formularios de inicio de sesi√≥n.
 *
 * üîπ Par√°metros:
 * - `value`: valor actual del texto ingresado.
 * - `onValueChange`: callback que actualiza el valor cuando el usuario escribe.
 * - `label`: texto superior que describe el campo (por ejemplo, ‚ÄúCorreo Electr√≥nico‚Äù).
 * - `placeholder`: texto visible cuando el campo est√° vac√≠o.
 * - `isError`: indica si el campo debe mostrarse con estado de error (borde rojo).
 * - `leadingIcon`: √≠cono opcional que aparece al inicio del campo (ejemplo: √≠cono de email).
 * - `modifier`: permite modificar la apariencia o el tama√±o desde el exterior.
 *
 * üéØ Comportamiento:
 * - Siempre es de una sola l√≠nea (`singleLine = true`).
 * - Aplica colores personalizados mediante `loginTextFieldColors()`.
 * - Se ajusta al ancho m√°ximo disponible (`fillMaxWidth()`).
 * - Usa esquinas redondeadas (`RoundedCornerShape(8.dp)`).
 */
@Composable
fun LoginTextField(
    value: String,
    onValueChange: (String) -> Unit,
    label: String,
    placeholder: String,
    isError: Boolean = false,
    leadingIcon: ImageVector? = null,
    modifier: Modifier = Modifier
) {
    OutlinedTextField(
        value = value,// Valor actual del campo
        onValueChange = onValueChange,// Actualiza el valor al escribir
        label = { Text(label, color = MaterialTheme.colorScheme.onSurface) },
        placeholder = {
            Text(
                placeholder,
                color = MaterialTheme.colorScheme.onSurfaceVariant.copy(alpha = 0.8f)
            )
        },
        leadingIcon = if (leadingIcon != null) {
            { Icon(leadingIcon, contentDescription = null) }// √çcono opcional
        } else null,
        singleLine = true,// Una sola l√≠nea de texto
        shape = RoundedCornerShape(8.dp),// Esquinas redondeadas
        colors = loginTextFieldColors(),
        modifier = modifier.fillMaxWidth(),// Ocupa todo el ancho disponible
        isError = isError// Estado de error (borde rojo)
    )
}

/**
 * üîê COMPONENTE: PASSWORD TEXT FIELD
 *
 * Campo de texto especializado para contrase√±as.
 * ----------------------------------------------------------
 * Este composable extiende el comportamiento de un `OutlinedTextField`
 * a√±adiendo control de visibilidad de texto y un √≠cono distintivo.
 *
 * üîπ Par√°metros:
 * - `value`: valor actual de la contrase√±a ingresada.
 * - `onValueChange`: callback que actualiza el valor cuando el usuario escribe.
 * - `label`: texto superior que describe el campo (por ejemplo, ‚ÄúContrase√±a‚Äù).
 * - `placeholder`: texto visible cuando el campo est√° vac√≠o.
 * - `isError`: indica si el campo debe mostrarse con borde rojo (estado de error).
 * - `modifier`: permite modificar la apariencia o el tama√±o desde el exterior.
 *
 * üéØ Comportamiento:
 * - Usa un √≠cono de candado (`Lock`) al inicio para indicar campo de seguridad.
 * - A√±ade un bot√≥n (√≠cono) al final para mostrar/ocultar la contrase√±a.
 * - Al presionar el √≠cono, alterna el estado `passwordVisible`.
 * - Aplica `PasswordVisualTransformation()` para ocultar el texto cuando corresponde.
 * - Mantiene el mismo estilo visual que los otros campos de login.
 */
@Composable
fun PasswordTextField(
    value: String,
    onValueChange: (String) -> Unit,
    label: String,
    placeholder: String,
    isError: Boolean = false,
    modifier: Modifier = Modifier
) {
    var passwordVisible by remember { mutableStateOf(false) }

    OutlinedTextField(
        value = value,// Valor actual de la contrase√±a
        onValueChange = onValueChange,// Actualiza el valor al escribir
        label = { Text(label, color = MaterialTheme.colorScheme.onSurface) },
        placeholder = {
            Text(
                placeholder,
                color = MaterialTheme.colorScheme.onSurfaceVariant.copy(alpha = 0.8f)
            )
        },
        leadingIcon = {
            Icon(Icons.Default.Lock, contentDescription = null)// √çcono inicial (candado)
        },
        trailingIcon = {
            IconButton(onClick = { passwordVisible = !passwordVisible }) {
                Icon(
                    imageVector = if (passwordVisible)
                        Icons.Default.Visibility// Muestra texto
                    else
                        Icons.Default.VisibilityOff,// Oculta texto
                    contentDescription = if (passwordVisible)
                        "Ocultar contrase√±a"
                    else
                        "Mostrar contrase√±a"
                )
            }
        },
        singleLine = true,// Entrada de una sola l√≠nea
        visualTransformation = if (passwordVisible)
            VisualTransformation.None// Texto visible
        else
            PasswordVisualTransformation(),// Texto oculto (‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢)
        shape = RoundedCornerShape(8.dp),// Esquinas redondeadas
        colors = loginTextFieldColors(),
        modifier = modifier.fillMaxWidth(),// Ocupa todo el ancho disponible
        isError = isError// Estado de error visual
    )
}

// =====================================================================
// üü© CHECKBOX Y OPCIONES INTERACTIVAS
// =====================================================================
/** COMPONENTE: REMEMBER AND FORGOT ROW
 *
 * Fila con checkbox "Recordar sesi√≥n" y bot√≥n "¬øOlvid√≥ su contrase√±a?".
 * ----------------------------------------------------------
 * Este composable agrupa dos acciones comunes en los formularios de inicio
 * de sesi√≥n: mantener la sesi√≥n iniciada y recuperar el acceso en caso de
 * olvidar la contrase√±a.
 *
 * üîπ Par√°metros:
 * - `rememberSession`: indica si el checkbox "Recordar sesi√≥n" est√° marcado.
 * - `forgotPasswordPressed`: controla el estado visual del bot√≥n de "Olvid√≥ su contrase√±a".
 * - `onRememberSessionChange`: callback que actualiza el estado del checkbox.
 * - `onForgotPasswordClick`: callback ejecutado al presionar el texto de recuperaci√≥n.
 *
 * üéØ Comportamiento:
 * - Distribuye los elementos a los extremos de la fila (espaciados con `Arrangement.SpaceBetween`).
 * - El checkbox usa colores personalizados coherentes con el tema `MaterialTheme`.
 * - El bot√≥n "¬øOlvid√≥ su contrase√±a?" cambia de color cuando se presiona (`forgotPasswordPressed = true`).
 * - Ambos elementos est√°n dise√±ados para mantener una interfaz clara y accesible.
 */
@Composable
fun RememberAndForgotRow(
    rememberSession: Boolean,
    forgotPasswordPressed: Boolean,
    onRememberSessionChange: (Boolean) -> Unit,
    onForgotPasswordClick: () -> Unit
) {
    Row(
        modifier = Modifier
            .fillMaxWidth()// Ocupa todoo el ancho disponible
            .padding(vertical = 8.dp),// Espaciado vertical interno
        horizontalArrangement = Arrangement.SpaceBetween,// Distribuye checkbox y bot√≥n a los extremos
        verticalAlignment = Alignment.CenterVertically// Centra verticalmente ambos elementos
    ) {
        // üü¢ BLOQUE IZQUIERDO: Checkbox "Recordar sesi√≥n"
        Row(verticalAlignment = Alignment.CenterVertically) {
            Checkbox(
                checked = rememberSession,// Estado actual del checkbox
                onCheckedChange = onRememberSessionChange,// Callback al marcar/desmarcar
                colors = CheckboxDefaults.colors(
                    checkedColor = MaterialTheme.colorScheme.primaryContainer,
                    uncheckedColor = MaterialTheme.colorScheme.onSurfaceVariant,
                    checkmarkColor = MaterialTheme.colorScheme.onPrimaryContainer
                ),
                interactionSource = remember { MutableInteractionSource() },// Control de interacci√≥n
                enabled = true,
                modifier = Modifier.clip(RoundedCornerShape(4.dp))// Bordes ligeramente redondeados
            )

            Spacer(modifier = Modifier.width(8.dp))// Espacio entre checkbox y texto

            Text(
                text = "Recordar sesi√≥n",
                color = MaterialTheme.colorScheme.inverseSurface
            )
        }

        // BLOQUE DERECHO üîµ : Bot√≥n "¬øOlvid√≥ su contrase√±a? "
        Box(
            modifier = Modifier
                .clip(RoundedCornerShape(8.dp)) // Bordes redondeados para est√©tica suave
                .background(
                    if (forgotPasswordPressed) MaterialTheme.colorScheme.outlineVariant// Color cuando est√° presionado
                    else MaterialTheme.colorScheme.secondaryContainer// Color por defecto
                )
                .clickable {
                    onForgotPasswordClick()// Acci√≥n al hacer clic
                }
                .padding(horizontal = 12.dp, vertical = 6.dp)// Relleno interno
        ) {
            Text(
                text = "¬øOlvid√≥ su contrase√±a?",
                color = MaterialTheme.colorScheme.primaryContainer
            )
        }
    }
}

// =====================================================================
// üü® BOTONES
// =====================================================================
/** üîò COMPONENTE: LOGIN BUTTON
 *
 * Bot√≥n principal de inicio de sesi√≥n con indicador de carga
 * ----------------------------------------------------------
 * Este composable muestra un bot√≥n de acci√≥n para iniciar sesi√≥n.
 * Su contenido se adapta seg√∫n el estado de carga (`isLoading`),
 * mostrando un indicador circular mientras se procesa la autenticaci√≥n.
 *
 * üîπ Par√°metros:
 * - `isLoading`: indica si se est√° ejecutando el proceso de login.
 *   Cuando es `true`, el bot√≥n se desactiva y muestra un spinner.
 * - `onClick`: callback que se ejecuta al presionar el bot√≥n.
 * - `modifier`: permite personalizar el tama√±o o estilo externo del bot√≥n.
 *
 * üéØ Comportamiento:
 * - El bot√≥n ocupa todo el ancho disponible (`fillMaxWidth()`).
 * - Aplica colores coherentes con el tema (`primaryContainer` y `onPrimaryContainer`).
 * - Cambia din√°micamente su contenido seg√∫n el estado:
 *      - `isLoading = true` ‚Üí muestra `CircularProgressIndicator`.
 *      - `isLoading = false` ‚Üí muestra texto "Iniciar sesi√≥n".
 * - Tiene bordes redondeados de 16.dp para armon√≠a visual.
 */
@Composable
fun LoginButton(
    isLoading: Boolean,
    onClick: () -> Unit,
    modifier: Modifier = Modifier
) {
    Button(
        onClick = onClick,
        modifier = modifier.fillMaxWidth(),
        colors = ButtonDefaults.buttonColors(
            containerColor = MaterialTheme.colorScheme.primaryContainer,
            contentColor = MaterialTheme.colorScheme.onPrimaryContainer
        ),
        shape = RoundedCornerShape(16.dp),
        enabled = !isLoading// Desactiva mientras carga
    ) {
        if (isLoading) {
            //üåÄ ESTADO DE CARGA: muestra indicador circular
            CircularProgressIndicator(
                modifier = Modifier.size(24.dp),
                color = MaterialTheme.colorScheme.scrim
            )
        } else {
            //üü¢ ESTADO NORMAL: muestra texto del bot√≥n
            Text(
                text = "Iniciar sesi√≥n",
                color = MaterialTheme.colorScheme.scrim,
                fontWeight = FontWeight.Bold,
                fontSize = MaterialTheme.typography.bodyLarge.fontSize
            )
        }
    }
}

/**
 * Bot√≥n para mostrar/ocultar cuentas demo con animaci√≥n de carga
 */

/**üê∫üî• COMPONENTE: DEMO ACCOUNTS BUTTON
 *
 * Bot√≥n de acceso r√°pido para cuentas demo.
 * ----------------------------------------------------------
 * Este composable muestra un bot√≥n interactivo que permite al usuario
 * acceder, ocultar o limpiar la selecci√≥n de cuentas de demostraci√≥n.
 * Su apariencia y comportamiento cambian din√°micamente seg√∫n los estados
 * del sistema: expansi√≥n (`isExpanded`), carga (`isLoading`) y selecci√≥n (`hasSelectedRole`).
 *
 * üîπ Par√°metros:
 * - `isExpanded`: indica si la lista de cuentas demo est√° visible.
 * - `isLoading`: indica si se est√°n cargando las cuentas demo.
 * - `hasSelectedRole`: indica si el usuario seleccion√≥ un rol demo.
 * - `onClick`: acci√≥n ejecutada al presionar el bot√≥n.
 *
 * üéØ Comportamiento:
 * - El color del bot√≥n var√≠a seg√∫n el estado:
 *      - Expandido y con rol ‚Üí fondo rojizo (indica acci√≥n de limpiar selecci√≥n).
 *      - Expandido sin rol ‚Üí fondo neutro (ocultar cuentas demo).
 *      - Contra√≠do ‚Üí fondo neutro (acceso r√°pido a cuentas demo).
 * - Muestra texto o animaci√≥n de carga seg√∫n `isLoading`.
 * - Ocupa todo el ancho disponible y tiene una altura fija (56.dp).
 */
@Composable
fun DemoAccountsButton(
    isExpanded: Boolean,
    isLoading: Boolean,
    hasSelectedRole: Boolean,
    onClick: () -> Unit
) {
    Button(
        onClick = onClick,/** Acci√≥n principal del bot√≥n */
        modifier = Modifier
            .fillMaxWidth()
            .padding(top = 12.dp)
            .height(56.dp),/** Altura uniforme */
        colors = ButtonDefaults.buttonColors(
            //üé® Color din√°mico del contenedor
            containerColor = if (isExpanded && hasSelectedRole)
                MaterialTheme.colorScheme.error.copy(alpha = 0.2f)/** Estado "cerrar y limpiar" */
            else
                MaterialTheme.colorScheme.surfaceVariant,         /** Estado normal o expandido */

            //üé® Color del contenido (texto / √≠conos)
            contentColor = if (isExpanded && hasSelectedRole)
                MaterialTheme.colorScheme.error    /** Resalta acci√≥n de limpiar */
            else
                MaterialTheme.colorScheme.onSurface/** Estado normal */
        ),
        shape = RoundedCornerShape(12.dp)/** Bordes redondeados consistentes */
    ) {
        Row(
            /**Row(...)Crea una fila horizontal para alinear los elementos dentro del bot√≥n
             *
             * */
            horizontalArrangement = Arrangement.Center,     //Centra los elementos horizontalmente dentro de la fila.
            verticalAlignment = Alignment.CenterVertically, //Alinea los elementos verticalmente en el centro
            modifier = Modifier.padding(vertical = 4.dp)    //Agrega un peque√±o margen vertical para dar espacio arriba y abajo dentro del bot√≥n.
        ) {
            //üåÄ ESTADO DE CARGA
            if (isLoading) {
                CircularProgressIndicator( //  Es el c√≠rculo de carga animado (spinner) que aparece cuando isLoading = true.
                    modifier = Modifier.size(20.dp),     //Define el tama√±o del spinner
                    strokeWidth = 2.dp,                         //Define el grosor del anillo de carga
                    color = MaterialTheme.colorScheme.onSurface //Usa un color acorde al tema del bot√≥n para mantener la coherencia visual.
                )
                Spacer(modifier = Modifier.width(12.dp))
                Text(
                    text = "Cargando cuentas...", // Muestra el texto "Cargando cuentas..."
                    fontWeight = FontWeight.Medium,
                    fontSize = MaterialTheme.typography.bodyMedium.fontSize
                )
            //üü¢ ESTADO NORMAL
            } else { //Si no se est√° cargando (isLoading = false), el bot√≥n muestra diferentes textos seg√∫n su estado:
                Text(
                    text = if (isExpanded && hasSelectedRole)
                        "Cerrar y Limpiar Selecci√≥n"        /** Cuando hay rol seleccionado */
                    else if (isExpanded)
                        "Ocultar Cuentas Demo"              /** Cuando solo est√°n visibles */
                    else
                        "Acceso R√°pido - Cuentas Demo",     /** Estado inicial (contra√≠do) */
                    fontWeight = FontWeight.Medium,
                    fontSize = MaterialTheme.typography.bodyMedium.fontSize
                )
            }
        }
    }
}

/**
 * Bot√≥n individual de rol
 *
 * Representa un rol dentro de la cuadr√≠cula (por ejemplo, "Administrador", "Profesor", etc.).
 * Cambia su color y estilo dependiendo si est√° seleccionado o no.
 *
 * @param title T√≠tulo del rol (ej. "Administrador")
 * @param subtitle Descripci√≥n corta del rol
 * @param selected Indica si este rol est√° actualmente seleccionado
 * @param onClick Acci√≥n que se ejecuta al presionar el bot√≥n
 * @param modifier Permite modificar el tama√±o, padding, etc.
 */
@Composable
fun RoleButton(
    title: String,
    subtitle: String,
    selected: Boolean,
    onClick: () -> Unit,
    modifier: Modifier = Modifier
) {
    /*** üîò Bot√≥n contorneado (OutlinedButton) que cambia color seg√∫n si est√° seleccionado ***/
    OutlinedButton(
        onClick = onClick,// Acci√≥n al presionar
        shape = RoundedCornerShape(8.dp),// Bordes redondeados
        colors = ButtonDefaults.outlinedButtonColors(
            containerColor = if (selected) /*** üé® Color de fondo seg√∫n estado ***/
                MaterialTheme.colorScheme.primaryContainer      // Fondo resaltado (activo)
            else
                MaterialTheme.colorScheme.secondaryContainer    // Fondo neutro (inactivo)
        ),
        /*** üé® Borde cambia tambi√©n seg√∫n el estado seleccionado ***/
        border = BorderStroke(
            1.dp,
            /*** Borde m√°s visible si est√° seleccionado ***/
            if (selected)
                MaterialTheme.colorScheme.onSurfaceVariant // Borde destacado
            else
                MaterialTheme.colorScheme.surfaceVariant   // Borde m√°s suave
        ),
        modifier = modifier
            .height(56.dp) // Altura uniforme
            .fillMaxWidth(),        // Ocupa todo el ancho disponible
        contentPadding = PaddingValues(8.dp) // Espaciado interno
    ) {
        /***üì¶ Contenedor interno que organiza el texto verticalmente
         *  Alineado a la izquierda y centrado verticalmente.
         * ***/
        Column(
            horizontalAlignment = Alignment.Start,    // Alinea los textos a la izquierda
            verticalArrangement = Arrangement.Center, // Centra verticalmente dentro del bot√≥n
            modifier = Modifier.fillMaxSize()         // Ocupa todo el espacio del bot√≥n
        ) {
            Text(
                /***  T√≠tulo del rol (nombre principal) ***/
                text = title,
                fontSize = MaterialTheme.typography.bodyMedium.fontSize,
                color = if (selected)
                    MaterialTheme.colorScheme.scrim      // Texto claro cuando est√° activo
                else
                    MaterialTheme.colorScheme.onSurface, // Texto oscuro cuando est√° inactivo
                fontWeight = FontWeight.Bold             // Negrita para destacar el rol
            )

            /*** Texto secundario: descripci√≥n del rol ***/
            Text(
                /*** Subt√≠tulo del rol (descripci√≥n corta) ***/
                text = subtitle,
                fontSize = MaterialTheme.typography.bodySmall.fontSize,
                color = if (selected)
                    MaterialTheme.colorScheme.scrim.copy(alpha = 0.7f)      // M√°s claro con opacidad
                else
                    MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f), // Gris suave cuando inactivo
                fontWeight = FontWeight.Normal
            )
        }
    }
}

// =====================================================================
// üüß ESTRUCTURAS DE GRID Y LAYOUTS
// =====================================================================
/**
 * üß© Grid (rejilla) de roles disponibles para acceso r√°pido (cuentas demo)
 *
 * Este composable muestra una cuadr√≠cula de botones (3 por fila),
 * donde cada bot√≥n representa un rol disponible en el sistema.
 *
 * Permite seleccionar un rol para autocompletar las credenciales del login.
 *
 * @param selectedRole Rol actualmente seleccionado (puede ser null si no hay selecci√≥n).
 * @param onRoleSelected Acci√≥n a ejecutar cuando el usuario selecciona un rol.
 */
@Composable
fun RolesGrid(
    selectedRole: UserRole?,
    onRoleSelected: (UserRole) -> Unit
) {
    // üìÉ Lista de roles disponibles, almacenada con remember() para evitar recalcular en cada recomposici√≥n
    val roles = remember {
        listOf(
            UserRole.ADMIN,
            UserRole.CO_ADMIN,
            UserRole.GESTOR_PEDIDOS,
            UserRole.PROFESOR,
            UserRole.BODEGA,
            UserRole.ASISTENTE
        )
    }
    /** üì¶ Contenedor principal vertical que aloja las filas del grid */
    Column(
        modifier = Modifier
            .fillMaxWidth()
            .padding(horizontal = 12.dp),
        verticalArrangement = Arrangement.spacedBy(12.dp) // Espacio entre filas
    ) {
        /**
         * Dividimos la lista en grupos de 3 roles por fila (chunked(3)).
         * Esto crea una estructura m√°s ordenada visualmente.
         *
         * üîë Se usa key(rowIndex) para optimizar recomposiciones cuando cambian los roles.
         */
        roles.chunked(3).forEachIndexed { rowIndex, rowItems ->
            key(rowIndex) {
                /** Cada fila horizontal contiene hasta 3 botones */
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.spacedBy(12.dp) // Espacio entre botones
                ) {
                    /**
                     * üîë Key individual por rol ‚Üí mejora el rendimiento
                     * y evita re-renderizados innecesarios si solo cambia un elemento.
                     */
                    rowItems.forEach { role ->
                        /** üîò Cada bot√≥n representa un rol individual */
                        key(role) {
                            RoleButton(
                                title = role.displayName,               /** Nombre visible del rol */
                                subtitle = role.description,            /** Descripci√≥n debajo del t√≠tulo */
                                selected = selectedRole == role,        /** Indica si este rol est√° seleccionado */
                                onClick = { onRoleSelected(role) },     /** Acci√≥n al presionar */
                                modifier = Modifier.weight(1f) /** Ocupa el mismo espacio que los dem√°s en la fila */
                            )
                        }
                    }
                }
            }
        }
    }
}

// =====================================================================
// üü• DI√ÅLOGOS
// =====================================================================
/**
 * üì© Di√°logo que muestra informaci√≥n para recuperar contrase√±a
 *
 * Este composable muestra un cuadro de di√°logo (AlertDialog) con informaci√≥n
 * sobre el proceso de recuperaci√≥n de contrase√±a.
 *
 * Si el usuario ya ingres√≥ un correo, se enmascara parcialmente para proteger su privacidad;
 * de lo contrario, muestra un mensaje indicando que primero debe ingresar un correo.
 *
 * @param email Correo actual ingresado por el usuario.
 * @param onDismiss Acci√≥n a ejecutar cuando se cierra el di√°logo.
 */
@Composable
fun ForgotPasswordDialog(
    email: String,
    onDismiss: () -> Unit
) {
    /** üé≠Se genera una versi√≥n enmascarada del correo para mostrarlo de forma segura */
    val maskedEmail = remember(email) {
        //Verifica si el correo contiene "@" y tiene al menos 3 caracteres
        if (email.contains("@") && email.length > 2) {
            val parts = email.split("@")       // Divide el correo en 2 partes: antes y despu√©s del "@"
            val localPart = parts[0]                        // Parte antes del "@", ej: "juanperez"
            val domain = parts.getOrNull(1) ?: ""   // Parte despu√©s del "@", ej: "gmail.com"

            /** Si el nombre local tiene al menos 2 caracteres, se enmascaran todos excepto los √∫ltimos 2 */
            if (localPart.length >= 2) {
                val lastTwo = localPart.takeLast(2) // Toma las 2 √∫ltimas letras ‚Üí "ez"
                val masked = "*".repeat(maxOf(0, localPart.length - 2)) // Reemplaza el resto por "*"
                "$masked$lastTwo@$domain" // Concatena todo ‚Üí "******ez@gmail.com"
            } else {
                email // Si tiene menos de 2 letras, muestra el correo como est√°
            }
            // Si el campo est√° vac√≠o
        } else if (email.isEmpty()) {
            "Ingrese un correo primero"

            // Si no contiene "@", pero no est√° vac√≠o
        } else {
            email
        }
    }

    /** üí¨ Di√°logo principal que contiene la informaci√≥n y el bot√≥n de cierre */
    AlertDialog(
        onDismissRequest = onDismiss,
        title = {/** T√≠tulo del di√°logo */
            Text(
                "Recuperar Contrase√±a",
                fontWeight = FontWeight.Bold
            )
        },
        text = {/** Contenido principal del di√°logo */
            Column(verticalArrangement = Arrangement.spacedBy(12.dp)) {
                Text(
                    "Para restaurar su contrase√±a, acceda al correo electr√≥nico:",
                    fontSize = MaterialTheme.typography.bodyMedium.fontSize
                )
                /** üì® Bloque que muestra el correo enmascarado */
                Surface(
                    color = MaterialTheme.colorScheme.primaryContainer.copy(alpha = 0.2f),
                    shape = RoundedCornerShape(8.dp)
                ) {
                    Text(
                        text = maskedEmail,
                        modifier = Modifier.padding(12.dp),
                        fontWeight = FontWeight.Bold,
                        color = MaterialTheme.colorScheme.primary
                    )
                }
                /** Nota adicional de confirmaci√≥n */
                Text(
                    "Recibir√° un enlace para restablecer su contrase√±a.",
                    fontSize = MaterialTheme.typography.bodySmall.fontSize,
                    color = MaterialTheme.colorScheme.onSurfaceVariant
                )
            }
        },
        /** üîò Bot√≥n de confirmaci√≥n ‚ÄúEntendido‚Äù que simplemente cierra el di√°logo */
        confirmButton = {
            TextButton(onClick = onDismiss) {
                Text("Entendido")
            }
        },
        shape = RoundedCornerShape(16.dp)
    )
}
