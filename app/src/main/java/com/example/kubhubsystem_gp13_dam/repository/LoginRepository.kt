package com.example.kubhubsystem_gp13_dam.data.repository

import com.example.kubhubsystem_gp13_dam.model.loginUsers.User
import com.example.kubhubsystem_gp13_dam.model.loginUsers.UserRole
import kotlinx.coroutines.delay

/**
 * Clase encargada de manejar la l√≥gica de autenticaci√≥n y datos de usuario.
 * Simula una fuente de datos local (sin conexi√≥n a una API real).
 */
class LoginRepository {

    // =====================================================================
    // üîπ LISTA DE USUARIOS SIMULADA
    // =====================================================================
    /***
     * Esta lista representa los usuarios disponibles dentro del sistema.
     * Cada usuario contiene:
     *  - username: correo del usuario
     *  - password: contrase√±a asociada
     *  - role: rol del sistema (enum UserRole)
     *  - displayName: nombre mostrado en la UI
     ***/
    private val users = listOf(
        User(
            username = "admin@kubhub.com",
            password = "admin123",
            role = UserRole.ADMIN,
            displayName = "Administrador"
        ),
        User(
            username = "coadmin@kubhub.com",
            password = "coadmin123",
            role = UserRole.CO_ADMIN,
            displayName = "Co-Administrador"
        ),
        User(
            username = "gestor@kubhub.com",
            password = "gestor123",
            role = UserRole.GESTOR_PEDIDOS,
            displayName = "Gestor de Pedidos"
        ),
        User(
            username = "profesor@kubhub.com",
            password = "profesor123",
            role = UserRole.PROFESOR,
            displayName = "Profesor"
        ),
        User(
            username = "bodega@kubhub.com",
            password = "bodega123",
            role = UserRole.BODEGA,
            displayName = "Bodeguero"
        ),
        User(
            username = "asistente@kubhub.com",
            password = "asistente123",
            role = UserRole.ASISTENTE,
            displayName = "Asistente"
        )
    )

    // =====================================================================
    // üî∏ FUNCI√ìN DE LOGIN (SIMULACI√ìN DE AUTENTICACI√ìN)
    // =====================================================================
    /**
     * Simula el inicio de sesi√≥n con delay (como si fuera una llamada a servidor).
     *
     * @param username Correo del usuario
     * @param password Contrase√±a ingresada
     * @return String? ‚Üí Devuelve:
     *  - `"username"` si el usuario no existe
     *  - `"password"` si la contrase√±a es incorrecta
     *  - `null` si la autenticaci√≥n es exitosa
     */
    suspend fun login(username: String, password: String): String? {
        /***
         * ‚úÖ delay() suspende la coroutine SIN BLOQUEAR el hilo principal.
         * Esto simula el tiempo de espera de una petici√≥n HTTP real.
         ***/
        delay(1500) // 1.5 segundos de simulaci√≥n de red

        /*** Busca el usuario en la lista seg√∫n el username ingresado ***/
        val user = users.find { it.username == username }

        /*** Valida el resultado y retorna el tipo de error o null si es correcto ***/
        return when {
            user == null -> "username"              // Usuario no encontrado
            user.password != password -> "password" // Contrase√±a incorrecta
            else -> null                            // Inicio de sesi√≥n exitoso
        }
    }

    // =====================================================================
    // üîπ FUNCI√ìN: OBTENER CREDENCIALES DEMO
    // =====================================================================
    /**
     * Obtiene las credenciales (usuario y contrase√±a) seg√∫n el rol seleccionado.
     *
     * @param role Rol del usuario (UserRole)
     * @return Pair<String, String>? ‚Üí (username, password)
     */
    fun getDemoCredentials(role: UserRole): Pair<String, String>? {
        /*** Busca el usuario correspondiente al rol indicado ***/
        val user = users.find { it.role == role }
        /*** Si lo encuentra, retorna un par con username y password ***/
        return user?.let { it.username to it.password }
    }

    // =====================================================================
    // üîπ FUNCI√ìN: BUSCAR USUARIO POR USERNAME
    // =====================================================================
    /**
     * Retorna el objeto User asociado a un username espec√≠fico.
     *
     * @param username Correo electr√≥nico del usuario
     * @return User? ‚Üí El usuario encontrado o null si no existe
     */
    fun getUserByUsername(username: String): User? { //No ultilizado actualmente
        return users.find { it.username == username }
    }

    // =====================================================================
    // üî∏ SINGLETON: INSTANCIA √öNICA DE REPOSITORIO
    // =====================================================================
    /**
     * Asegura que solo exista una √∫nica instancia de LoginRepository.
     * Evita m√∫ltiples cargas de datos innecesarias.
     */
    companion object {
        /*** @Volatile
         *  instance como @Volatile hace que Todos los hilos ven el valor actualizado inmediatamente,
         *  Si Hilo A crea la instancia y la asigna a instance, Hilo B la ver√° inmediatamente al leer la variable.
         *  synchronized(this) ‚Üí asegura que solo un hilo a la vez ejecute ese bloque.
         *  @Volatile ‚Üí asegura que todos los hilos vean el resultado inmediatamente despu√©s de crear la instancia.
         *
         *  BURDO
         *  @Volatile = ‚ÄúOye JVM, cualquier cambio que haga un hilo aqu√≠ debe ser visible para todos los dem√°s hilos inmediatamente‚Äù.
         *  synchronized = ‚ÄúNo dejes que m√°s de un hilo entre aqu√≠ a la vez‚Äù.
         *
         *  Combinados, garantizan que: 1 Solo se cree una instancia del singleton. 2 Todos los hilos vean esa misma instancia.
         *  __________________________________
         *  Sin @Volatile y sin synchronized
         *  instance = null  ‚Üí ‚ÄúNo le estoy diciendo a los dem√°s hilos que miren esto de inmediato.‚Äù
         *  Varias llamadas concurrentes pueden crear m√°s de una instancia del singleton, porque cada hilo ve instance como null y entra a crear su propia instancia.
         *
         *  BURDO
         *  Cada hilo puede pensar: ‚Äú¬°Uy, no hay instancia a√∫n! Voy a crearla yo mismo‚Äù, y varios hilos pueden hacerlo al mismo tiempo.
         *  Resultado: rompes el patr√≥n singleton, porque hay m√∫ltiples objetos en vez de uno solo compartido.
         *
         *  En resumen: @Volatile + synchronized = seguridad y visibilidad; sin ellos = riesgo de inconsistencias en entornos multihilo.
         ***/
        @Volatile
        private var instance: LoginRepository? = null

        /***
         * Retorna la instancia existente o crea una nueva si no existe.
         * Usa 'synchronized' para asegurar acceso concurrente seguro.
         ***/
        fun getInstance(): LoginRepository {
            return instance ?: synchronized(this) {
                instance ?: LoginRepository().also { instance = it }
            }
        }
    }
}